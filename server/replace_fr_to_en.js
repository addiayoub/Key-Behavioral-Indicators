const mongoose = require('mongoose');
const UserResponse = require('./models/UserResponse');
const KeyResponse = require('./models/KeyResponse');
const Question = require('./models/Question');

// Configuration de la base de donn√©es
const DB_URI = 'mongodb://localhost:27017/survey_db';

class FrenchToEnglishReplacer {
  constructor() {
    this.replacedCount = 0;
    this.errorCount = 0;
    this.processedCount = 0;
    this.questionsMap = new Map();
    this.categoryMap = new Map(); // Nouveau: mapping des cat√©gories FR->EN
    this.diagnostics = {
      frenchValuesFound: [],
      unmappedQuestions: [],
      categoryMappings: []
    };
  }

  async connect() {
    try {
      await mongoose.connect(DB_URI);
      console.log('‚úÖ Connexion √† MongoDB √©tablie');
    } catch (error) {
      console.error('‚ùå Erreur de connexion √† MongoDB:', error);
      throw error;
    }
  }

  async disconnect() {
    await mongoose.disconnect();
    console.log('üîå Connexion MongoDB ferm√©e');
  }

  /**
   * Charge toutes les questions et cr√©e les mappings FR->EN
   */
  async loadQuestions() {
    console.log('üìö Chargement des questions...');
    try {
      const questions = await Question.find({});
      console.log(`üìä ${questions.length} questions charg√©es`);
      
      questions.forEach(question => {
        this.questionsMap.set(question.id, question);
        
        // Cr√©er le mapping des cat√©gories FR->EN
        if (question.category && question.categoryAng) {
          this.categoryMap.set(question.category, question.categoryAng);
          this.diagnostics.categoryMappings.push({
            fr: question.category,
            en: question.categoryAng
          });
        }
      });
      
      console.log('‚úÖ Questions mises en cache');
      console.log(`üè∑Ô∏è  Mappings de cat√©gories cr√©√©s: ${this.categoryMap.size}`);
      
      // Afficher les mappings de cat√©gories
      console.log('\nüìã MAPPINGS DE CAT√âGORIES:');
      this.categoryMap.forEach((en, fr) => {
        console.log(`  "${fr}" ‚Üí "${en}"`);
      });
      
    } catch (error) {
      console.error('‚ùå Erreur lors du chargement des questions:', error);
      throw error;
    }
  }

  /**
   * D√©tecte si une valeur semble √™tre en fran√ßais
   */
  isFrenchValue(value) {
    if (!value || typeof value !== 'string') return false;
    
    // Mots-cl√©s fran√ßais courants dans les r√©ponses
    const frenchIndicators = [
      'Tr√®s', 'tr√®s', 'Plut√¥t', 'plut√¥t', 'Pas du tout', 'pas du tout',
      'Jamais', 'jamais', 'Souvent', 'souvent', 'Toujours', 'toujours',
      'Beaucoup', 'beaucoup', 'Peu', 'peu', '√ânorm√©ment', 'enormement',
      'Assez', 'assez', 'Moyennement', 'moyennement', 'Faiblement', 'faiblement',
      'Compl√®tement', 'completement', 'Partiellement', 'partiellement',
      'Oui', 'oui', 'Non', 'non', 'Peut-√™tre', 'peut-etre',
      'Industrie', 'industrie', 'Organisation', 'organisation',
      'Entreprise', 'entreprise', 'Soci√©t√©', 'societe'
    ];
    
    return frenchIndicators.some(indicator => value.includes(indicator));
  }

  /**
   * Obtient la vraie r√©ponse anglaise depuis le mod√®le Question
   */
  getEnglishAnswer(questionId, answerId, currentAnswerText) {
    const question = this.questionsMap.get(questionId);
    if (!question) {
      console.warn(`‚ö†Ô∏è  Question ${questionId} non trouv√©e`);
      this.diagnostics.unmappedQuestions.push(questionId);
      return null;
    }

    // Si answerId est d√©fini et valide
    if (answerId !== undefined && answerId !== null && 
        question.answersAng && question.answersAng[answerId]) {
      return question.answersAng[answerId];
    }

    // Si c'est une r√©ponse personnalis√©e, essayer de la mapper
    if (currentAnswerText && question.answers && question.answersAng) {
      const frenchIndex = question.answers.findIndex(ans => ans === currentAnswerText);
      if (frenchIndex !== -1 && question.answersAng[frenchIndex]) {
        return question.answersAng[frenchIndex];
      }
      
      // Recherche approximative (ignorer la casse et les accents)
      const normalizedCurrent = this.normalizeText(currentAnswerText);
      const frenchIndexApprox = question.answers.findIndex(ans => 
        this.normalizeText(ans) === normalizedCurrent
      );
      if (frenchIndexApprox !== -1 && question.answersAng[frenchIndexApprox]) {
        return question.answersAng[frenchIndexApprox];
      }
    }

    // Si on d√©tecte que c'est fran√ßais mais qu'on ne trouve pas de mapping
    if (this.isFrenchValue(currentAnswerText)) {
      this.diagnostics.frenchValuesFound.push({
        questionId,
        value: currentAnswerText,
        type: 'answer'
      });
    }

    return null;
  }

  /**
   * Normalise le texte pour la comparaison
   */
  normalizeText(text) {
    if (!text) return '';
    return text.toLowerCase()
               .normalize('NFD')
               .replace(/[\u0300-\u036f]/g, '') // Supprime les accents
               .trim();
  }

  /**
   * Obtient la vraie question anglaise depuis le mod√®le Question
   */
  getEnglishQuestion(questionId, currentQuestionText) {
    const question = this.questionsMap.get(questionId);
    if (!question) return null;
    
    // Si on d√©tecte que c'est fran√ßais mais qu'on n'a pas de mapping
    if (this.isFrenchValue(currentQuestionText) && !question.questionAng) {
      this.diagnostics.frenchValuesFound.push({
        questionId,
        value: currentQuestionText,
        type: 'question'
      });
    }
    
    return question.questionAng;
  }

  /**
   * Obtient la vraie cat√©gorie anglaise
   */
  getEnglishCategory(questionId, currentCategory) {
    const question = this.questionsMap.get(questionId);
    let englishCategory = null;
    
    if (question && question.categoryAng) {
      englishCategory = question.categoryAng;
    } else if (currentCategory && this.categoryMap.has(currentCategory)) {
      englishCategory = this.categoryMap.get(currentCategory);
    }
    
    // Si on d√©tecte que c'est fran√ßais mais qu'on n'a pas de mapping
    if (this.isFrenchValue(currentCategory) && !englishCategory) {
      this.diagnostics.frenchValuesFound.push({
        questionId,
        value: currentCategory,
        type: 'category'
      });
    }
    
    return {
      category: englishCategory,
      categoryShort: englishCategory ? englishCategory.substring(0, 2) : null
    };
  }

  /**
   * Scan complet pour d√©tecter toutes les valeurs fran√ßaises restantes
   */
  async scanForFrenchValues() {
    console.log('\nüîç SCAN DES VALEURS FRAN√áAISES RESTANTES...');
    
    const userResponses = await UserResponse.find({});
    let frenchCount = 0;
    
    for (const userResponse of userResponses) {
      if (userResponse.responses && Array.isArray(userResponse.responses)) {
        for (const response of userResponse.responses) {
          if (this.isFrenchValue(response.answerText)) {
            console.log(`üá´üá∑ UserResponse ${userResponse.userId} - Q${response.questionId}: "${response.answerText}"`);
            frenchCount++;
          }
          if (this.isFrenchValue(response.questionText)) {
            console.log(`üá´üá∑ UserResponse ${userResponse.userId} - Q${response.questionId} question: "${response.questionText}"`);
            frenchCount++;
          }
          if (this.isFrenchValue(response.category)) {
            console.log(`üá´üá∑ UserResponse ${userResponse.userId} - Q${response.questionId} category: "${response.category}"`);
            frenchCount++;
          }
        }
      }
      
      if (userResponse.categoryScores && Array.isArray(userResponse.categoryScores)) {
        for (const categoryScore of userResponse.categoryScores) {
          if (this.isFrenchValue(categoryScore.category)) {
            console.log(`üá´üá∑ UserResponse ${userResponse.userId} - CategoryScore: "${categoryScore.category}"`);
            frenchCount++;
          }
        }
      }
    }
    
    console.log(`\nüìä Total de valeurs fran√ßaises d√©tect√©es: ${frenchCount}`);
    return frenchCount;
  }

  /**
   * Remplace les r√©ponses fran√ßaises par leurs √©quivalents anglais dans UserResponse
   */
  async replaceUserResponses() {
    console.log('\nüîÑ D√©but du remplacement des r√©ponses utilisateur...');
    
    try {
      const userResponses = await UserResponse.find({});
      console.log(`üìä ${userResponses.length} documents UserResponse trouv√©s`);

      for (const userResponse of userResponses) {
        let hasChanges = false;
        
        if (userResponse.responses && Array.isArray(userResponse.responses)) {
          for (const response of userResponse.responses) {
            const questionId = response.questionId;
            
            // Remplacer answerText et answerTextAng
            const englishAnswer = this.getEnglishAnswer(questionId, response.answerId, response.answerText);
            if (englishAnswer && englishAnswer !== response.answerText) {
              console.log(`  üîÑ Q${questionId} Answer: "${response.answerText}" ‚Üí "${englishAnswer}"`);
              response.answerText = englishAnswer;
              response.answerTextAng = englishAnswer;
              hasChanges = true;
            }

            // Remplacer questionText et questionTextAng
            const englishQuestion = this.getEnglishQuestion(questionId, response.questionText);
            if (englishQuestion && englishQuestion !== response.questionText) {
              console.log(`  üîÑ Q${questionId} Question: "${response.questionText}" ‚Üí "${englishQuestion}"`);
              response.questionText = englishQuestion;
              response.questionTextAng = englishQuestion;
              hasChanges = true;
            }

            // Remplacer category et categoryAng
            const englishCategory = this.getEnglishCategory(questionId, response.category);
            if (englishCategory.category && englishCategory.category !== response.category) {
              console.log(`  üîÑ Q${questionId} Category: "${response.category}" ‚Üí "${englishCategory.category}"`);
              response.category = englishCategory.category;
              response.categoryAng = englishCategory.category;
              hasChanges = true;
            }

            // Remplacer categoryShort et categoryAngShort
            if (englishCategory.categoryShort && englishCategory.categoryShort !== response.categoryShort) {
              response.categoryShort = englishCategory.categoryShort;
              response.categoryAngShort = englishCategory.categoryShort;
              hasChanges = true;
            }
          }
        }

        // Traiter les categoryScores avec mapping am√©lior√©
        if (userResponse.categoryScores && Array.isArray(userResponse.categoryScores)) {
          for (const categoryScore of userResponse.categoryScores) {
            let englishCategoryName = null;
            
            // Essayer d'abord le mapping direct
            if (this.categoryMap.has(categoryScore.category)) {
              englishCategoryName = this.categoryMap.get(categoryScore.category);
            } else {
              // Chercher dans les questions une cat√©gorie correspondante
              const sampleQuestion = Array.from(this.questionsMap.values())
                .find(q => q.category === categoryScore.category || q.categoryAng === categoryScore.category);
              
              if (sampleQuestion && sampleQuestion.categoryAng) {
                englishCategoryName = sampleQuestion.categoryAng;
              }
            }
            
            if (englishCategoryName && categoryScore.category !== englishCategoryName) {
              console.log(`  üîÑ CategoryScore: "${categoryScore.category}" ‚Üí "${englishCategoryName}"`);
              categoryScore.category = englishCategoryName;
              categoryScore.categoryAng = englishCategoryName;
              categoryScore.categoryShort = englishCategoryName.substring(0, 2);
              categoryScore.categoryAngShort = englishCategoryName.substring(0, 2);
              hasChanges = true;
            }
          }
        }

        // Traiter les keyResponses
        if (userResponse.keyResponses) {
          hasChanges = await this.updateKeyResponsesInUserResponse(userResponse.keyResponses) || hasChanges;
        }

        // Sauvegarder si des changements ont √©t√© effectu√©s
        if (hasChanges) {
          try {
            await userResponse.save();
            this.replacedCount++;
            console.log(`  ‚úÖ UserResponse ${userResponse.userId} mis √† jour`);
          } catch (error) {
            console.error(`  ‚ùå Erreur lors de la sauvegarde de ${userResponse.userId}:`, error.message);
            this.errorCount++;
          }
        }

        this.processedCount++;
      }
    } catch (error) {
      console.error('‚ùå Erreur lors du traitement des UserResponse:', error);
      throw error;
    }
  }

  /**
   * Met √† jour les keyResponses avec les vraies valeurs anglaises
   */
  async updateKeyResponsesInUserResponse(keyResponses) {
    let hasChanges = false;
    
    // Question 6 - Industry
    const industryAnswer = this.getEnglishAnswer(6, null, keyResponses.industry);
    if (industryAnswer && keyResponses.industry !== industryAnswer) {
      console.log(`  üîÑ Industry: "${keyResponses.industry}" ‚Üí "${industryAnswer}"`);
      keyResponses.industry = industryAnswer;
      keyResponses.industryAng = industryAnswer;
      hasChanges = true;
    }

    // Question 8 - Organization Type
    const orgTypeAnswer = this.getEnglishAnswer(8, null, keyResponses.organizationType);
    if (orgTypeAnswer && keyResponses.organizationType !== orgTypeAnswer) {
      console.log(`  üîÑ Organization Type: "${keyResponses.organizationType}" ‚Üí "${orgTypeAnswer}"`);
      keyResponses.organizationType = orgTypeAnswer;
      keyResponses.organizationTypeAng = orgTypeAnswer;
      hasChanges = true;
    }

    // Question 9 - Change Phase
    const changePhaseAnswer = this.getEnglishAnswer(9, null, keyResponses.changePhase);
    if (changePhaseAnswer && keyResponses.changePhase !== changePhaseAnswer) {
      console.log(`  üîÑ Change Phase: "${keyResponses.changePhase}" ‚Üí "${changePhaseAnswer}"`);
      keyResponses.changePhase = changePhaseAnswer;
      keyResponses.changePhaseAng = changePhaseAnswer;
      hasChanges = true;
    }

    return hasChanges;
  }

  /**
   * Remplace les r√©ponses fran√ßaises par leurs √©quivalents anglais dans KeyResponse
   */
  async replaceKeyResponses() {
    console.log('\nüîÑ D√©but du remplacement des r√©ponses cl√©s...');
    
    try {
      const keyResponses = await KeyResponse.find({});
      console.log(`üìä ${keyResponses.length} documents KeyResponse trouv√©s`);

      for (const keyResponse of keyResponses) {
        let hasChanges = false;
        
        // Question 6 - Industry
        const industryAnswer = this.getEnglishAnswer(6, null, keyResponse.industry);
        if (industryAnswer && keyResponse.industry !== industryAnswer) {
          console.log(`  üîÑ Industry: "${keyResponse.industry}" ‚Üí "${industryAnswer}"`);
          keyResponse.industry = industryAnswer;
          keyResponse.industryAng = industryAnswer;
          hasChanges = true;
        }

        // Question 8 - Organization Type
        const orgTypeAnswer = this.getEnglishAnswer(8, null, keyResponse.organizationType);
        if (orgTypeAnswer && keyResponse.organizationType !== orgTypeAnswer) {
          console.log(`  üîÑ Organization Type: "${keyResponse.organizationType}" ‚Üí "${orgTypeAnswer}"`);
          keyResponse.organizationType = orgTypeAnswer;
          keyResponse.organizationTypeAng = orgTypeAnswer;
          hasChanges = true;
        }

        // Question 9 - Change Phase
        const changePhaseAnswer = this.getEnglishAnswer(9, null, keyResponse.changePhase);
        if (changePhaseAnswer && keyResponse.changePhase !== changePhaseAnswer) {
          console.log(`  üîÑ Change Phase: "${keyResponse.changePhase}" ‚Üí "${changePhaseAnswer}"`);
          keyResponse.changePhase = changePhaseAnswer;
          keyResponse.changePhaseAng = changePhaseAnswer;
          hasChanges = true;
        }

        if (hasChanges) {
          try {
            await keyResponse.save();
            this.replacedCount++;
            console.log(`  ‚úÖ KeyResponse ${keyResponse.userId} mis √† jour`);
          } catch (error) {
            console.error(`  ‚ùå Erreur lors de la sauvegarde de ${keyResponse.userId}:`, error.message);
            this.errorCount++;
          }
        }

        this.processedCount++;
      }
    } catch (error) {
      console.error('‚ùå Erreur lors du traitement des KeyResponse:', error);
      throw error;
    }
  }

  /**
   * Affiche les diagnostics d√©taill√©s
   */
  displayDiagnostics() {
    console.log('\nüîç DIAGNOSTICS D√âTAILL√âS:');
    
    if (this.diagnostics.frenchValuesFound.length > 0) {
      console.log(`\nüá´üá∑ Valeurs fran√ßaises non mapp√©es trouv√©es: ${this.diagnostics.frenchValuesFound.length}`);
      this.diagnostics.frenchValuesFound.forEach(item => {
        console.log(`  Q${item.questionId} (${item.type}): "${item.value}"`);
      });
    }
    
    if (this.diagnostics.unmappedQuestions.length > 0) {
      console.log(`\n‚ùì Questions non trouv√©es: ${this.diagnostics.unmappedQuestions.length}`);
      console.log(`  Questions: ${this.diagnostics.unmappedQuestions.join(', ')}`);
    }
  }

  /**
   * Affiche un r√©sum√© des op√©rations effectu√©es
   */
  displaySummary() {
    console.log('\nüìã R√âSUM√â DES OP√âRATIONS:');
    console.log(`üìä Documents trait√©s: ${this.processedCount}`);
    console.log(`‚úÖ Documents modifi√©s: ${this.replacedCount}`);
    console.log(`‚ùå Erreurs rencontr√©es: ${this.errorCount}`);
    
    if (this.errorCount === 0) {
      console.log('üéâ Toutes les op√©rations ont √©t√© effectu√©es avec succ√®s!');
    } else {
      console.log('‚ö†Ô∏è  Des erreurs ont √©t√© rencontr√©es. V√©rifiez les logs ci-dessus.');
    }
  }

  /**
   * Effectue une sauvegarde avant les modifications
   */
  async createBackup() {
    console.log('üíæ Cr√©ation d\'une sauvegarde recommand√©e avant d\'ex√©cuter ce script...');
    console.log('Commande sugg√©r√©e: mongodump --db survey_db --out backup_avant_remplacement');
  }

  /**
   * Mode dry-run am√©lior√©
   */
  async dryRun() {
    console.log('üîç MODE DRY-RUN - Aucune modification ne sera appliqu√©e\n');
    
    const userResponses = await UserResponse.find({}).limit(10);
    let potentialChanges = 0;
    
    for (const userResponse of userResponses) {
      if (userResponse.responses && Array.isArray(userResponse.responses)) {
        for (const response of userResponse.responses) {
          const englishAnswer = this.getEnglishAnswer(response.questionId, response.answerId, response.answerText);
          if (englishAnswer && englishAnswer !== response.answerText) {
            console.log(`  üìù Q${response.questionId} Answer: "${response.answerText}" ‚Üí "${englishAnswer}"`);
            potentialChanges++;
          }
          
          const englishQuestion = this.getEnglishQuestion(response.questionId, response.questionText);
          if (englishQuestion && englishQuestion !== response.questionText) {
            console.log(`  üìù Q${response.questionId} Question: "${response.questionText}" ‚Üí "${englishQuestion}"`);
            potentialChanges++;
          }
          
          const englishCategory = this.getEnglishCategory(response.questionId, response.category);
          if (englishCategory.category && englishCategory.category !== response.category) {
            console.log(`  üìù Q${response.questionId} Category: "${response.category}" ‚Üí "${englishCategory.category}"`);
            potentialChanges++;
          }
        }
      }
    }

    console.log(`\nüìä Total des changements potentiels (√©chantillon): ${potentialChanges}`);
  }
}

// Fonction principale
async function main() {
  const replacer = new FrenchToEnglishReplacer();
  
  try {
    await replacer.connect();
    await replacer.loadQuestions();
    
    // Scanner d'abord pour voir l'√©tat actuel
    console.log('\nüîç SCAN INITIAL DES VALEURS FRAN√áAISES...');
    const frenchValuesCount = await replacer.scanForFrenchValues();
    
    if (frenchValuesCount === 0) {
      console.log('üéâ Aucune valeur fran√ßaise d√©tect√©e. Le remplacement semble d√©j√† effectu√©.');
      return;
    }
    
    await replacer.createBackup();
    
    console.log('\nEx√©cution du dry-run...');
    await replacer.dryRun();
    
    console.log('\n‚ö†Ô∏è  ATTENTION: Ce script va modifier vos donn√©es!');
    console.log('Assurez-vous d\'avoir cr√©√© une sauvegarde avant de continuer.');
    
    console.log('\nüöÄ D√©but des remplacements r√©els...');
    await replacer.replaceUserResponses();
    await replacer.replaceKeyResponses();
    
    // Scanner √† nouveau apr√®s remplacement
    console.log('\nüîç SCAN FINAL DES VALEURS FRAN√áAISES...');
    const remainingFrenchValues = await replacer.scanForFrenchValues();
    
    replacer.displayDiagnostics();
    replacer.displaySummary();
    
    if (remainingFrenchValues > 0) {
      console.log(`\n‚ö†Ô∏è  Il reste ${remainingFrenchValues} valeurs fran√ßaises. V√©rifiez les diagnostics ci-dessus.`);
    }
    
  } catch (error) {
    console.error('üí• Erreur critique:', error);
  } finally {
    await replacer.disconnect();
  }
}

module.exports = FrenchToEnglishReplacer;

if (require.main === module) {
  main().catch(console.error);
}